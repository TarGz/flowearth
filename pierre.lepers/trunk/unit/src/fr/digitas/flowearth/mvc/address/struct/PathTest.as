/* ***** BEGIN LICENSE BLOCK *****
 * Copyright (C) 2007-2009 Digitas France
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * The Initial Developer of the Original Code is
 * Digitas France Flash Team
 *
 * Contributor(s):
 *   Digitas France Flash Team
 *
 * ***** END LICENSE BLOCK ***** */


package fr.digitas.flowearth.mvc.address.struct {	import asunit.framework.TestCase;
	
	import fr.digitas.flowearth.mvc.address.structs.INode;
	import fr.digitas.flowearth.mvc.address.structs.IPath;
	import fr.digitas.flowearth.mvc.address.structs.Path;
	import fr.digitas.flowearth.mvc.address.structs.system.nodeSystem;	
	public class PathTest extends TestCase {		public function PathTest(testMethod : String = null) {			super( testMethod );		}				public function testDevicedAbsoluteTargeting() : void {						var pathStr : String;			var path : Path;			var node : INode;						pathStr = "ndB:/A/A/A";			path = new Path( pathStr );			node = path.toNode( );						assertEquals( "testDevicedAbsoluteTargeting parentCount" , 3 , parentsCount( node ) );			assertEquals( "testDevicedAbsoluteTargeting node name" , "A" , node.getId( ) );			assertEquals( "testDevicedAbsoluteTargeting node name" , "A" , node.parent( ).getId( ) );			assertEquals( "testDevicedAbsoluteTargeting node name" , "A" , node.parent( ).parent( ).getId( ) );			assertEquals( "testDevicedAbsoluteTargeting node name" , "ndB" , node.parent( ).parent( ).parent( ).getId( ) );			assertNull( node.parent( ).parent( ).parent( ).parent( ) );			pathStr = "ndB:/A/B/C";			path = new Path( pathStr );			node = path.toNode( );						assertEquals( "testDevicedAbsoluteTargeting parentCount" , 3 , parentsCount( node ) );			assertEquals( "testDevicedAbsoluteTargeting node name" , "C" , node.getId( ) );			assertEquals( "testDevicedAbsoluteTargeting node name" , "B" , node.parent( ).getId( ) );			assertEquals( "testDevicedAbsoluteTargeting node name" , "A" , node.parent( ).parent( ).getId( ) );			assertEquals( "testDevicedAbsoluteTargeting node name" , "ndB" , node.parent( ).parent( ).parent( ).getId( ) );			assertNull( node.parent( ).parent( ).parent( ).parent( ) );			pathStr = "ndB:/A";			path = new Path( pathStr );			node = path.toNode( );						assertEquals( "testDevicedAbsoluteTargeting parentCount" , 1 , parentsCount( node ) );			assertEquals( "testDevicedAbsoluteTargeting node name" , "A" , node.getId( ) );			assertEquals( "testDevicedAbsoluteTargeting node name" , "ndB" , node.parent( ).getId( ) );			assertNull( node.parent( ).parent( ) );		}		public function testAbsoluteTargeting() : void {						var pathStr : String;			var path : Path;			var node : INode;						pathStr = "A/A/A";			path = new Path( pathStr );			node = path.toNode( );						assertEquals( "testAbsoluteTargeting parentCount" , 3 , parentsCount( node ) );			assertEquals( "testAbsoluteTargeting node name" , "A" , node.getId( ) );			assertEquals( "testAbsoluteTargeting node name" , "A" , node.parent( ).getId( ) );			assertEquals( "testAbsoluteTargeting node name" , "A" , node.parent( ).parent( ).getId( ) );			assertEquals( "testAbsoluteTargeting node name" , "ndB" , node.parent( ).parent( ).parent( ).getId( ) );			assertNull( node.parent( ).parent( ).parent( ).parent( ) );			pathStr = "A/B/C";			path = new Path( pathStr );			node = path.toNode( );						assertEquals( "testAbsoluteTargeting parentCount" , 3 , parentsCount( node ) );			assertEquals( "testAbsoluteTargeting node name" , "C" , node.getId( ) );			assertEquals( "testAbsoluteTargeting node name" , "B" , node.parent( ).getId( ) );			assertEquals( "testAbsoluteTargeting node name" , "A" , node.parent( ).parent( ).getId( ) );			assertEquals( "testAbsoluteTargeting node name" , "ndB" , node.parent( ).parent( ).parent( ).getId( ) );			assertNull( node.parent( ).parent( ).parent( ).parent( ) );			pathStr = "A";			path = new Path( pathStr );			node = path.toNode( );						assertEquals( "testAbsoluteTargeting parentCount" , 1 , parentsCount( node ) );			assertEquals( "testAbsoluteTargeting node name" , "A" , node.getId( ) );			assertEquals( "testAbsoluteTargeting node name" , "ndB" , node.parent( ).getId( ) );			assertNull( node.parent( ).parent( ) );		}		public function testDottedTargeting() : void {						var pathStr : String;			var path : Path;			var node : INode;						pathStr = "./A/A";			path = new Path( pathStr );			node = path.toNode( );						assertEquals( "testDottedTargeting parentCount" , 3 , parentsCount( node ) );			assertEquals( "testDottedTargeting node name" , "A" , node.getId( ) );			assertEquals( "testDottedTargeting node name" , "A" , node.parent( ).getId( ) );			assertEquals( "testDottedTargeting node name" , "A" , node.parent( ).parent( ).getId( ) );			assertEquals( "testDottedTargeting node name" , "ndB" , node.parent( ).parent( ).parent( ).getId( ) );			assertNull( node.parent( ).parent( ).parent( ).parent( ) );			pathStr = "./B/C";			path = new Path( pathStr );			node = path.toNode( );						assertEquals( "testDottedTargeting parentCount" , 3 , parentsCount( node ) );			assertEquals( "testDottedTargeting node name" , "C" , node.getId( ) );			assertEquals( "testDottedTargeting node name" , "B" , node.parent( ).getId( ) );			assertEquals( "testDottedTargeting node name" , "A" , node.parent( ).parent( ).getId( ) );			assertEquals( "testDottedTargeting node name" , "ndB" , node.parent( ).parent( ).parent( ).getId( ) );			assertNull( node.parent( ).parent( ).parent( ).parent( ) );			pathStr = "./";			path = new Path( pathStr );			node = path.toNode( );						assertEquals( "testDottedTargeting parentCount" , 1 , parentsCount( node ) );			assertEquals( "testDottedTargeting node name" , "A" , node.getId( ) );			assertEquals( "testDottedTargeting node name" , "ndB" , node.parent( ).getId( ) );			assertNull( node.parent( ).parent( ) );		}		public function testDoubleDottedTargeting() : void {						var prevDefault : IPath = nodeSystem.getDefaultPath( );			nodeSystem.setDefaultPath( new Path( "ndB:/B/B/B" ) );						var pathStr : String;			var path : Path;			var node : INode;						pathStr = "../../../A/A/A";			path = new Path( pathStr );			node = path.toNode( );						assertEquals( "testDoubleDottedTargeting parentCount" , 3 , parentsCount( node ) );			assertEquals( "testDoubleDottedTargeting node name" , "A" , node.getId( ) );			assertEquals( "testDoubleDottedTargeting node name" , "A" , node.parent( ).getId( ) );			assertEquals( "testDoubleDottedTargeting node name" , "A" , node.parent( ).parent( ).getId( ) );			assertEquals( "testDoubleDottedTargeting node name" , "ndB" , node.parent( ).parent( ).parent( ).getId( ) );			assertNull( node.parent( ).parent( ).parent( ).parent( ) );			pathStr = "../C"; // B/B/C			path = new Path( pathStr );			node = path.toNode( );						assertEquals( "testDoubleDottedTargeting parentCount" , 3 , parentsCount( node ) );			assertEquals( "testDoubleDottedTargeting node name" , "C" , node.getId( ) );			assertEquals( "testDoubleDottedTargeting node name" , "B" , node.parent( ).getId( ) );			assertEquals( "testDoubleDottedTargeting node name" , "B" , node.parent( ).parent( ).getId( ) );			assertEquals( "testDoubleDottedTargeting node name" , "ndB" , node.parent( ).parent( ).parent( ).getId( ) );			assertNull( node.parent( ).parent( ).parent( ).parent( ) );			pathStr = "../../";			path = new Path( pathStr );			node = path.toNode( );						assertEquals( "testDoubleDottedTargeting parentCount" , 1 , parentsCount( node ) );			assertEquals( "testDoubleDottedTargeting node name" , "B" , node.getId( ) );			assertEquals( "testDoubleDottedTargeting node name" , "ndB" , node.parent( ).getId( ) );			assertNull( node.parent( ).parent( ) );			nodeSystem.setDefaultPath( prevDefault );		}						public function testDevicedAbsoluteExist() : void {						var pathStr : String;			var path : Path;						pathStr = "ndB:/A/A/A";			path = new Path( pathStr );			assertTrue( "testDevicedAbsoluteExist" , path.nodeExist( ) );			pathStr = "ndB:/A/B/C";			path = new Path( pathStr );			assertTrue( "testDevicedAbsoluteExist" , path.nodeExist( ) );			pathStr = "ndB:/A";			path = new Path( pathStr );			assertTrue( "testDevicedAbsoluteExist" , path.nodeExist( ) );		}		public function testAbsoluteExist() : void {						var pathStr : String;			var path : Path;						pathStr = "A/A/A";			path = new Path( pathStr );			assertTrue( "testDevicedAbsoluteExist" , path.nodeExist( ) );			pathStr = "A/B/C";			path = new Path( pathStr );			assertTrue( "testDevicedAbsoluteExist" , path.nodeExist( ) );			pathStr = "A";			path = new Path( pathStr );			assertTrue( "testDevicedAbsoluteExist" , path.nodeExist( ) );		}		public function testDottedExist() : void {						var pathStr : String;			var path : Path;						pathStr = "./A/A";			path = new Path( pathStr );			assertTrue( "testDevicedAbsoluteExist" , path.nodeExist( ) );			pathStr = "./B/C";			path = new Path( pathStr );			assertTrue( "testDevicedAbsoluteExist" , path.nodeExist( ) );			pathStr = "./";			path = new Path( pathStr );			assertTrue( "testDevicedAbsoluteExist" , path.nodeExist( ) );		}		public function testDoubleDottedExist() : void {						var prevDefault : IPath = nodeSystem.getDefaultPath( );			nodeSystem.setDefaultPath( new Path( "ndB:/B/B/B" ) );						var pathStr : String;			var path : Path;						pathStr = "../../../A/A/A";			path = new Path( pathStr );			assertTrue( "testDevicedAbsoluteExist" , path.nodeExist( ) );						pathStr = "../C"; // B/B/C			path = new Path( pathStr );			assertTrue( "testDevicedAbsoluteExist" , path.nodeExist( ) );						pathStr = "../../";			path = new Path( pathStr );			assertTrue( "testDevicedAbsoluteExist" , path.nodeExist( ) );						nodeSystem.setDefaultPath( prevDefault );		}		private function parentsCount( n : INode ) : int {			var res : int = 0;			while( (n = n.parent( ) ) != null ) res ++;			return res;		}	}}