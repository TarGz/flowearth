Configuration usage

= Introduction =

Configuration class store a collection of properties retreive from a specific xml format.

Here is the list of master features, detailed bellow:
 * Each properties can depends of other properies
 * Easily externalize parts of conf files into sub files
 * Easily externalize misc datas.
 * switch/case like feature
 * Namespace support, to avoid naming conflicts.


= How to start =

Configuration class is a singleton, the simplest way to acces to it is using _Conf_ global property.

{{{
import fr.digitas.flowearth.conf.Conf;

trace( Conf.getString( "myProperty" ) );

//---------------------------------------------
//But you can also use the classic getInstance()

import fr.digitas.flowearth.conf.Configuration;

trace( Configuration.getInstance( ).getString( "myProperty" ) );
}}}

But before ask it for properties values, you need to load a property file.

{{{
Conf.addEventListener( Event.COMPLETE, onConfLoaded );

Conf.loadXml( "myConfFile.xml" );

private fucntion onConfLoaded( e : Event ) : void {
   trace( Conf.hasProperty( "myProperty" ) );
}
}}}

= Conf file format =

As in ECMAScript, a Property is simply defined by a name (or QName) and a value. Native Property's value is always a String.

Properties of a conf file are extract listing all childrens of the root node.

====start with a simple example====
Here is a conf file with 3 properties.
{{{
<confExample>
	<simple>my simple property</simple>
	<complex>
		<foo>bar</foo>
		<foo>bar</foo>
		<foo>bar</foo>
	</complexe>
	<basic_dependancy>${simple} roxx!</basic_dependancy>
</confExample>
}}}

  * "simple" have the value "my simple property"
  * "complex" have the following value :
{{{
"<foo>bar</foo>
<foo>bar</foo>
<foo>bar</foo>"
}}}
  * "basic_dependancy" have the value "my simple property roxx!"

=== property name ===

The name of the property is set using the _XML.name()_ value of the given child. The propery is stored inside the same namespace than the child.

For details about acces to a property see 
[ConfigurationUsage#Retreive_a_property 'Retreive a property' chapter].

Note that three names are reserved :
  * externalConf (list of external conf files)
  * externalData (list of external properties values)
  * switch ( switch/case parsing )

=== property value===

The value of the property is set depending child node content type :
====Simple content====
If the child node has a simple text content (_child.hasSimpleContent()_ equals _true_), the value is set using _child.text()_).
When you redefine a property having a simple content, the old value is erased and replaced by the new one. So if two children with the same name are found in conf files, only the last child parsed will be used.
====Complex content====
If the child node has a complex content (_child.hasComplexeContent()_ equals _true_), the value is set using _child.children().toXMLString()_.
When a complexe property is redefined (eg. using _Conf.setProperty()_ or multiple child nodes with the same name.) contents of children are concatenated.


{{{

<conf>
	<filesize>10</filesize>
	<filesize>ten</filesize>

	<filelist>
		<file>file1.txt</file>
	</filelist>

	<filelist>
		<file>file2.txt</file>
		<file>file3.txt</file>
	</filelist>
	
</conf>

}}}

{{{
trace( Conf.filesize );
// ten

trace( Conf.filelist );
// <filelist>
//   <file>file1.txt</file>
//   <file>file2.txt</file>
//   <file>file3.txt</file>
// </filelist>

}}}



= Retreive a property =

Configuration class provide several methods to acces to a property :

  * getString()
  * getDatas()
  * getNumber()

You can also call a property on Configuration instance itself:
{{{
Conf.myProperty;
}}}

In any case, Configuration always return the solved value of the property, it mean all dependancy ( _${myDependancyProp}_ ) will be replaced by the correct value.

== getString ==
This method return the native value of the property (each conf props are stored as String even if prop have a complexe xml content).

{{{
Conf.getString( "myProperty" );
}}}

If the property have a simple content, the value of _text().toXMLString()_ is return.
If the property have a complexe content, the value of _children().toXMLString()_ is return.

But in this last case, you may prefered to use _getDatas()_ method.

== getDatas ==
This method return an XML representation of the given property. 
The _String_ value of the property is surrounded by a xml tag named with the local name of the prop, then returned as an XML object.

{{{
// XML

<confFile>
   <!-- create a complex property "complex" -->
   <complex>
      <a>hello</a>
      <b>world</b>
   </complex>

</confFile>

// AS

Conf.getString( "complex" );
// String value :
//
"<a>hello</a>
<b>world</b>"

Conf.getDatas( "complex" );
// XML Object :
//
<complex>
    <a>hello</a>
    <b>world</b>
</complex>


}}}

Notes :
  * this method always remove the namespace of the property  from the xml result.
  * A new instance of XML is created each to you call _getDatas()_ method.


== getNumber ==
This method cast the String value into Number value using _parseFloat()_ method.

== proxy acces ==
Configuration class extends _flash.utils.Proxy_. So you can acces to properties on the instance itself.
 * If prop has simple content, the String value is return as using _getString()_ method.
 * If prop has complexe content, a XML is return, as using _getDatas()_ method

You can also use Namespace when using the _Proxy_ acces. ( see 

{{{
Conf.myProperty;
}}}















{{{

<conf>
	<basedir>${basepath}</basedir>
	
	<assets_dir>${basedir}/${local}/assets</assets_dir>
	<flv_dir>${assets_dir}/flvs</flv_dir>

	<local>en_GB</local>
</conf>

}}}


{{{
public function ConfSampleA() {
	//-----°1
	Conf.setProperty( "basepath", "." );
	Conf.grabParam( loaderInfo );
	
	//-----°2
	Conf.addEventListener( Event.COMPLETE , onConfLoaded );
	Conf.loadXml( new URLRequest ( Conf.getString("basepath") + "/confSampleA.conf") );
}

private function onConfLoaded(event : Event) : void {
	
	//-----°3
	trace( "°3",  Conf.getString( "assets_dir" ) );
	
	//-----°4
	Conf.setProperty( "local", "fr_FR" );
	trace( "°4", Conf.getString( "assets_dir" ) );

	//-----°5
	trace( "°5", Conf.getString( "basepath" ) );
	// --> if flashvar exist 		"../../../../../samples/fr/digitas/flowearth/conf"
	// --> if swf is standalone		"."
	
}
}}}